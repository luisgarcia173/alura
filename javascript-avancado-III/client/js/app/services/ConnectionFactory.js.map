{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA;AACA,IAAIA,oBAAqB,YAAU;;AAE/B;AACA,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,YAAf;AACA,QAAIC,aAAa,IAAjB;AACA,QAAIC,QAAQ,IAAZ;;AAEA;AACA;AAEI,qCAAc;AAAA;;AACV,kBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM2B;AACnB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC;AACA,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEA;AACAQ,gCAAYI,eAAZ,GAA8B,UAACC,CAAD,EAAO;AACjC;AACAf,0CAAkBgB,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKA;AACAR,gCAAYS,SAAZ,GAAwB,UAACJ,CAAD,EAAO;AAC3B,4BAAG,CAACX,UAAJ,EAAe;AACXA,yCAAaW,EAAEE,MAAF,CAASC,MAAtB;;AAEA;AACA;AACA;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAW;AAC1B,sCAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBAbD;;AAeA;AACAM,gCAAYW,OAAZ,GAAsB,UAACN,CAAD,EAAO;AACzBO,gCAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;AACAf,+BAAOM,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAKH,iBAjCM,CAAP;AAkCH;AAzCL;AAAA;AAAA,8CA2C6B;AACrB,oBAAGrB,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AAhDL;AAAA;AAAA,0CAkDyBA,UAlDzB,EAkDqC;AAC7BH,uBAAOyB,OAAP,CAAe,iBAAS;AACpB;AACA,wBAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EAAiD;AAC7CzB,mCAAW0B,iBAAX,CAA6BD,KAA7B;AACH;AACD;AACAzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBAPD;AAQH;AA3DL;;AAAA;AAAA;AA8DH,CAxEuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["// Transforma classe em um modulo usando funcao anonima (Design Pattern: Module)\r\nvar ConnectionFactory = (function(){\r\n\r\n    // Scope variables\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'aluraframe';\r\n    let connection = null;\r\n    let close = null;\r\n    \r\n    // Classe responsavel por controlar conexao banco\r\n    return class ConnectionFactory {\r\n    \r\n        constructor() {\r\n            throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n        }\r\n    \r\n        static getConnection() {\r\n            return new Promise((resolve, reject) => {\r\n    \r\n                // Cria Database (nome, versao)\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n    \r\n                // Quando criado ou alterado (baseado na versao)\r\n                openRequest.onupgradeneeded = (e) => {\r\n                    // Crio as stores\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n    \r\n                // Quando iniciado o DB\r\n                openRequest.onsuccess = (e) => {\r\n                    if(!connection){\r\n                        connection = e.target.result;\r\n\r\n                        // Monkey Patch: pattern que força a modificação de um comportamento padrao API, neste caso está \r\n                        // mandando uma exception quando o usuario tenta fechar conexao pelo objeto connection e nao pela\r\n                        // Factory\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error(\"Não é possível encerrar a conexão diretamente!\");\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n    \r\n                // Em caso de erro\r\n                openRequest.onerror = (e) => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n    \r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    \r\n        static _createStores(connection) {\r\n            stores.forEach(store => {\r\n                // Verifica se tabela existe e remove\r\n                if (connection.objectStoreNames.contains(store)) {\r\n                    connection.deleteObjectStore(store)\r\n                }\r\n                // Cria tabela com auto incremento\r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n            });\r\n        }\r\n    \r\n    }\r\n})();\r\n"]}