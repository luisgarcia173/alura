{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","resolve","reject","get","then","negociacoes","map","Negociacao","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["// Classe de interface de servicos para Negociacoes\r\nclass NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        // Implementando (DesignPattern: Promise)\r\n        return new Promise((resolve, reject) => {\r\n            // Utiliza classe HttpService\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                   resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociaçōes da semana.');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        // Implementando (DesignPattern: Promise)\r\n        return new Promise((resolve, reject) => {\r\n            // Utiliza classe HttpService\r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociaçōes da semana anterior.');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        // Implementando (DesignPattern: Promise)\r\n        return new Promise((resolve, reject) => {\r\n            // Utiliza classe HttpService\r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociaçōes da semana retrasada.');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\r\n\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n    \r\n    cadastra(negociacao) {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.adiciona(negociacao))\r\n                .then(() => resolve('Negociação adicionada com sucesso!'))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível adicionar a Negociação!')\r\n                });\r\n        });\r\n    }\r\n\r\n    lista() {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => resolve(dao.listaTodos()))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject(erro);\r\n                });\r\n        });\r\n    }\r\n\r\n    apaga() {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => resolve(dao.apagaTodos()))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject(erro);\r\n                });\r\n        });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n                // Logica para evitar deplicados\r\n                .then(negociacoes => \r\n                    negociacoes.filter(negociacao => \r\n                        !listaAtual.some(negociacaoExistente => \r\n                            JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n                )\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error(erro);\r\n                });\r\n    }\r\n\r\n}"]}