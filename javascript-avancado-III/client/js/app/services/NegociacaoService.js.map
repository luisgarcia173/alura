{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","Negociacao","ConnectionFactory","NegociacaoDao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","Error","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {Negociacao} from '../models/Negociacao';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\n\r\n// Classe de interface de servicos para Negociacoes\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n        // Implementando (DesignPattern: Promise)\r\n        return new Promise((resolve, reject) => {\r\n            // Utiliza classe HttpService\r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                   resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociaçōes da semana.');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n        // Implementando (DesignPattern: Promise)\r\n        return new Promise((resolve, reject) => {\r\n            // Utiliza classe HttpService\r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociaçōes da semana anterior.');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n        // Implementando (DesignPattern: Promise)\r\n        return new Promise((resolve, reject) => {\r\n            // Utiliza classe HttpService\r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociaçōes da semana retrasada.');\r\n                });\r\n        });\r\n    }\r\n\r\n    obterNegociacoes() {\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\r\n\r\n            return negociacoes;\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n    }\r\n    \r\n    cadastra(negociacao) {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.adiciona(negociacao))\r\n                .then(() => resolve('Negociação adicionada com sucesso!'))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível adicionar a Negociação!')\r\n                });\r\n        });\r\n    }\r\n\r\n    lista() {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => resolve(dao.listaTodos()))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject(erro);\r\n                });\r\n        });\r\n    }\r\n\r\n    apaga() {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => resolve(dao.apagaTodos()))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject(erro);\r\n                });\r\n        });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        return this.obterNegociacoes()\r\n                // Logica para evitar deplicados\r\n                .then(negociacoes => \r\n                    negociacoes.filter(negociacao => \r\n                        !listaAtual.some(negociacaoExistente => \r\n                            JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n                )\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error(erro);\r\n                });\r\n    }\r\n\r\n}"]}